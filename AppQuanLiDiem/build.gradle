

buildscript {
    repositories {
        google()
        jcenter()

    }
    ext.kotlin_version = '1.4.32'
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url "https://jitpack.io" }
        google()
        jcenter()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task upgradeVersion {
    group 'help'
    description 'version'
    doLast {
        println("---update version---\n")
        def versionProps = new Properties()
        def versionPropsFile = rootProject.file('version.properties')
        if (versionPropsFile.exists()) {
            versionProps.load(new FileInputStream(versionPropsFile))
        }
        String oldVersionCode = versionProps['versionCode']
        String oldVersionName = versionProps['versionName']
        if (oldVersionCode == null || oldVersionName == null ||
                oldVersionCode.isEmpty() || oldVersionName.isEmpty()) {
            println("error:not version")
            return;
        }
        versionProps['versionCode'] = String.valueOf(versionProps['versionCode'].toInteger() + 1)
        String str = versionProps['versionName'].toString()
        versionProps['versionName'] = str.substring(0, str.lastIndexOf('.') + 1) +
                (str.substring(str.lastIndexOf('.') + 1).toInteger() + 1)
        String tip =
                "from$oldVersionName($oldVersionCode)update${versionProps['versionName']}(${versionProps['versionCode']})"
        println(tip)

        def writer = new FileWriter(versionPropsFile)
        versionProps.store(writer, null)
        writer.flush()
        writer.close()
        def tag = "v${versionProps['versionName']}"
        cmdExecute("git pull")
        cmdExecute("git push")
        cmdExecute("git add version.properties")
        cmdExecute("git commit -m \"versionï¼š$tag\"")
        cmdExecute("git push origin")
        cmdExecute("git tag $tag")
        cmdExecute("git push origin $tag")
    }
}

void cmdExecute(String cmd) {
    println "\nrun$cmd"
    println cmd.execute().text
}