// Generated by view binder compiler. Do not edit!
package com.example.appquanlidiem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.appquanlidiem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView d2;

  @NonNull
  public final CardView d3;

  @NonNull
  public final CardView d4;

  @NonNull
  public final CardView d6;

  @NonNull
  public final Spinner mtSpinner1;

  @NonNull
  public final TextView mtTen;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull CardView d2,
      @NonNull CardView d3, @NonNull CardView d4, @NonNull CardView d6, @NonNull Spinner mtSpinner1,
      @NonNull TextView mtTen) {
    this.rootView = rootView;
    this.d2 = d2;
    this.d3 = d3;
    this.d4 = d4;
    this.d6 = d6;
    this.mtSpinner1 = mtSpinner1;
    this.mtTen = mtTen;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.d2;
      CardView d2 = ViewBindings.findChildViewById(rootView, id);
      if (d2 == null) {
        break missingId;
      }

      id = R.id.d3;
      CardView d3 = ViewBindings.findChildViewById(rootView, id);
      if (d3 == null) {
        break missingId;
      }

      id = R.id.d4;
      CardView d4 = ViewBindings.findChildViewById(rootView, id);
      if (d4 == null) {
        break missingId;
      }

      id = R.id.d6;
      CardView d6 = ViewBindings.findChildViewById(rootView, id);
      if (d6 == null) {
        break missingId;
      }

      id = R.id.mt_spinner1;
      Spinner mtSpinner1 = ViewBindings.findChildViewById(rootView, id);
      if (mtSpinner1 == null) {
        break missingId;
      }

      id = R.id.mt_ten;
      TextView mtTen = ViewBindings.findChildViewById(rootView, id);
      if (mtTen == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, d2, d3, d4, d6, mtSpinner1,
          mtTen);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
